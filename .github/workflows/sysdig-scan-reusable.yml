name: üõ°Ô∏è Sysdig Security Scan Results Parser

on:
  workflow_call:
    inputs:
      scan_outcome:
        description: 'Outcome of the Sysdig scan (success/failure)'
        required: true
        type: string
    secrets:
      SLACK_WEBHOOK_URL_SYSDIG:
        required: true

jobs:
  parse-and-notify:
    runs-on: stuart-generic-x64

    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: sysdig-scan-results
        continue-on-error: true

      - name: Capture and parse Sysdig scan output
        id: parse_sysdig_output
        run: | # bash
          echo "Sysdig scan outcome: ${{ inputs.scan_outcome }}"
          
          SCAN_RESULTS_JSON="scan-results.json"
          CRITICAL_COUNT="0" # Default to 0
    
          if [ -f "$SCAN_RESULTS_JSON" ]; then
            if jq . "$SCAN_RESULTS_JSON" > /dev/null 2>&1; then
              # Method 1: Try to get policy failure count from policyEvaluations
              POLICY_FAILURE_COUNT=$(jq -r '
                .result.policyEvaluations[]? 
                | select(.name | contains("Critical Vulnerabilities")) 
                | .bundles[]?.rules[]? 
                | select(.ruleType == "vulnSeverityAndThreats") 
                | .failures 
                | length
              ' "$SCAN_RESULTS_JSON" 2>/dev/null)
              
              if [ -n "$POLICY_FAILURE_COUNT" ] && [ "$POLICY_FAILURE_COUNT" -gt 0 ]; then
                CRITICAL_COUNT="$POLICY_FAILURE_COUNT"
                echo "Found $CRITICAL_COUNT policy failures from JSON."
              else
                # Method 2: Get total critical vulnerabilities as fallback
                TOTAL_CRITICAL=$(jq -r '.result.vulnTotalBySeverity.critical // 0' "$SCAN_RESULTS_JSON" 2>/dev/null)
                if [ -n "$TOTAL_CRITICAL" ] && [ "$TOTAL_CRITICAL" -gt 0 ]; then
                  CRITICAL_COUNT="$TOTAL_CRITICAL"
                  echo "Found $CRITICAL_COUNT total critical vulnerabilities from JSON."
                fi
              fi
            fi
          fi
    
          # Fallback to log parsing if JSON didn't yield a critical count
          if [ "$CRITICAL_COUNT" = "0" ]; then
            for file in scan-logs/*.log scan-logs/*.txt *.log *.txt; do
              if [ -f "$file" ]; then
                POLICY_LINE=$(grep -E "Policy:.*Pipeline FAILED \([0-9]+ failures" "$file" 2>/dev/null || echo "")
                if [ -n "$POLICY_LINE" ]; then
                    POLICY_FAILURES=$(echo "$POLICY_LINE" | grep -oP 'Pipeline FAILED \(\K[0-9]+(?= failures)' || echo "")
                    if [ -z "$POLICY_FAILURES" ]; then
                      POLICY_FAILURES="0"
                    fi
                    if [ "$POLICY_FAILURES" != "0" ]; then
                        CRITICAL_COUNT="$POLICY_FAILURES"
                        echo "Found $CRITICAL_COUNT policy failures from log file."
                        break
                    fi
                fi
              fi
            done
          fi
          
          # If no specific count found but scan failed, we know there are vulnerabilities
          if [ "$CRITICAL_COUNT" = "0" ] && [ "${{ inputs.scan_outcome }}" = "failure" ]; then
            CRITICAL_COUNT="detected"
          fi
          
          echo "Final critical vulnerabilities count: $CRITICAL_COUNT"
          echo "CRITICAL_COUNT=$CRITICAL_COUNT" >> $GITHUB_ENV
          echo "critical_count_output=$CRITICAL_COUNT" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: always() && env.CRITICAL_COUNT != '0' && env.CRITICAL_COUNT != ''
        run: |
          REPO_NAME="${{ github.repository }}"
          BRANCH_NAME="${{ github.ref_name }}"
          COMMIT_SHA="${{ github.sha }}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          if [ "${{ env.CRITICAL_COUNT }}" = "detected" ]; then
            MESSAGE="üö® *Sysdig Security Scan Alert* üö®\n\n*Repository:* $REPO_NAME\n*Branch:* $BRANCH_NAME\n\n\n‚ùå *Critical vulnerabilities detected* in the Docker image.\n\nPlease check the workflow logs for detailed vulnerability information.\n\nüîó [View workflow details]($WORKFLOW_URL)"
          else
            MESSAGE="üö® *Sysdig Security Scan Alert* üö®\n\n*Repository:* $REPO_NAME\n*Branch:* $BRANCH_NAME\n*Commit:* ${COMMIT_SHA:0:7}\n\n‚ùå *${{ env.CRITICAL_COUNT }} critical vulnerabilities* found in the Docker image.\n\nüîó [View workflow details]($WORKFLOW_URL)"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            "${{ secrets.SLACK_WEBHOOK_URL_SYSDIG }}"
          
          echo "Slack notification sent for ${{ env.CRITICAL_COUNT }} critical vulnerabilities"
